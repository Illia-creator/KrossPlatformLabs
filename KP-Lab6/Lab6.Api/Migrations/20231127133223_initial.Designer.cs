// <auto-generated />
using System;
using Lab6.Api.Dal;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Lab6.Api.Migrations
{
    [DbContext(typeof(LabDbContext))]
    [Migration("20231127133223_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Lab6.Api.Entities.Address", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Line1NumberBuilding")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("StateProvinceCountry")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ZipPostCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Lab6.Api.Entities.BrandNameMedication", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("BrandMedicationCost")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BrandMedicationDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BrandMedicationName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("BrandNameMedications");
                });

            modelBuilder.Entity("Lab6.Api.Entities.Customer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AddressId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreditCardNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CustomerFirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CustomerLastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CustomerPhone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly>("DateCardExpiry")
                        .HasColumnType("date");

                    b.Property<DateOnly>("DateOriginalyJoined")
                        .HasColumnType("date");

                    b.Property<string>("OtherCustomerDetails")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Lab6.Api.Entities.Doctor", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AddressId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DoctorEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DoctorFirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DoctorLastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DoctorPhone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OtherDoctorDetails")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("Lab6.Api.Entities.GenericMedication", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("GenericMedicationsDetails")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MedicationId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MedicationId")
                        .IsUnique();

                    b.ToTable("GenericMedications");
                });

            modelBuilder.Entity("Lab6.Api.Entities.ItemOrdered", b =>
                {
                    b.Property<string>("PrescriptionId")
                        .HasColumnType("text");

                    b.Property<string>("MedicationId")
                        .HasColumnType("text");

                    b.Property<DateOnly>("DateOrdered")
                        .HasColumnType("date");

                    b.Property<DateOnly>("DateReceived")
                        .HasColumnType("date");

                    b.Property<int>("QuantityOrdered")
                        .HasColumnType("integer");

                    b.Property<int>("QuantityReceived")
                        .HasColumnType("integer");

                    b.HasKey("PrescriptionId", "MedicationId");

                    b.HasIndex("MedicationId");

                    b.ToTable("ItemsOrdered");
                });

            modelBuilder.Entity("Lab6.Api.Entities.Medication", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<double>("MedicationCost")
                        .HasColumnType("double precision");

                    b.Property<string>("MedicationDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MedicationName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MedicationOtherDetails")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("MedicationTypeCode")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Medications");
                });

            modelBuilder.Entity("Lab6.Api.Entities.PharmaceuticalCompany", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CompanyOtherDetails")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PharmaceuticalCompanies");
                });

            modelBuilder.Entity("Lab6.Api.Entities.Prescription", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly>("DatePrescriptionFilled")
                        .HasColumnType("date");

                    b.Property<DateOnly>("DatePrescriptionProcessed")
                        .HasColumnType("date");

                    b.Property<DateOnly>("DatePrescriptionReceived")
                        .HasColumnType("date");

                    b.Property<DateOnly>("DatePrescriptionRecievedFromDoctor")
                        .HasColumnType("date");

                    b.Property<DateOnly>("DatePrescriptionRenewal")
                        .HasColumnType("date");

                    b.Property<DateOnly>("DatePrescriptionSendToCompany")
                        .HasColumnType("date");

                    b.Property<DateOnly>("DatePrescriptionSendToDoctor")
                        .HasColumnType("date");

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OtherPrescriptionDetails")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PaymentMethodCode")
                        .HasColumnType("integer");

                    b.Property<int>("PrescriptionStatusCode")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DoctorId");

                    b.ToTable("Prescriptions");
                });

            modelBuilder.Entity("Lab6.Api.Entities.PrescriptionItem", b =>
                {
                    b.Property<string>("PrescriptionId")
                        .HasColumnType("text");

                    b.Property<string>("MedicationId")
                        .HasColumnType("text");

                    b.Property<string>("InstructionsToCustomer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PrestcriptionQuantity")
                        .HasColumnType("integer");

                    b.HasKey("PrescriptionId", "MedicationId");

                    b.HasIndex("MedicationId");

                    b.ToTable("PrescriptionItems");
                });

            modelBuilder.Entity("Lab6.Api.Entities.Relations.GenericToBrandNameCorrespondence", b =>
                {
                    b.Property<string>("BrandNameMedicationId")
                        .HasColumnType("text");

                    b.Property<string>("GenericMedicationId")
                        .HasColumnType("text");

                    b.HasKey("BrandNameMedicationId", "GenericMedicationId");

                    b.HasIndex("GenericMedicationId");

                    b.ToTable("GenericToBrandNameCorrespondences");
                });

            modelBuilder.Entity("Lab6.Api.Entities.BrandNameMedication", b =>
                {
                    b.HasOne("Lab6.Api.Entities.PharmaceuticalCompany", "PharmaceuticalCompany")
                        .WithMany("BrandNameMedications")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PharmaceuticalCompany");
                });

            modelBuilder.Entity("Lab6.Api.Entities.Customer", b =>
                {
                    b.HasOne("Lab6.Api.Entities.Address", "Address")
                        .WithMany("Customers")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("Lab6.Api.Entities.Doctor", b =>
                {
                    b.HasOne("Lab6.Api.Entities.Address", "Address")
                        .WithMany("Doctors")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("Lab6.Api.Entities.GenericMedication", b =>
                {
                    b.HasOne("Lab6.Api.Entities.Medication", "Medication")
                        .WithOne("GenericMedication")
                        .HasForeignKey("Lab6.Api.Entities.GenericMedication", "MedicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medication");
                });

            modelBuilder.Entity("Lab6.Api.Entities.ItemOrdered", b =>
                {
                    b.HasOne("Lab6.Api.Entities.Medication", "Medication")
                        .WithMany("ItemsOrdered")
                        .HasForeignKey("MedicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lab6.Api.Entities.Prescription", "Prescription")
                        .WithMany("ItemsOrdered")
                        .HasForeignKey("PrescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medication");

                    b.Navigation("Prescription");
                });

            modelBuilder.Entity("Lab6.Api.Entities.Prescription", b =>
                {
                    b.HasOne("Lab6.Api.Entities.Customer", "Customer")
                        .WithMany("Prescriptions")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lab6.Api.Entities.Doctor", "Doctor")
                        .WithMany("Prescriptions")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Lab6.Api.Entities.PrescriptionItem", b =>
                {
                    b.HasOne("Lab6.Api.Entities.Medication", "Medication")
                        .WithMany("PrescriptionItems")
                        .HasForeignKey("MedicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lab6.Api.Entities.Prescription", "Prescription")
                        .WithMany("PrescriptionItems")
                        .HasForeignKey("PrescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medication");

                    b.Navigation("Prescription");
                });

            modelBuilder.Entity("Lab6.Api.Entities.Relations.GenericToBrandNameCorrespondence", b =>
                {
                    b.HasOne("Lab6.Api.Entities.BrandNameMedication", "BrandNameMedication")
                        .WithMany("GenericToBrandNameCorrespondences")
                        .HasForeignKey("BrandNameMedicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lab6.Api.Entities.GenericMedication", "GenericMedication")
                        .WithMany("GenericToBrandNameCorrespondences")
                        .HasForeignKey("GenericMedicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BrandNameMedication");

                    b.Navigation("GenericMedication");
                });

            modelBuilder.Entity("Lab6.Api.Entities.Address", b =>
                {
                    b.Navigation("Customers");

                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("Lab6.Api.Entities.BrandNameMedication", b =>
                {
                    b.Navigation("GenericToBrandNameCorrespondences");
                });

            modelBuilder.Entity("Lab6.Api.Entities.Customer", b =>
                {
                    b.Navigation("Prescriptions");
                });

            modelBuilder.Entity("Lab6.Api.Entities.Doctor", b =>
                {
                    b.Navigation("Prescriptions");
                });

            modelBuilder.Entity("Lab6.Api.Entities.GenericMedication", b =>
                {
                    b.Navigation("GenericToBrandNameCorrespondences");
                });

            modelBuilder.Entity("Lab6.Api.Entities.Medication", b =>
                {
                    b.Navigation("GenericMedication")
                        .IsRequired();

                    b.Navigation("ItemsOrdered");

                    b.Navigation("PrescriptionItems");
                });

            modelBuilder.Entity("Lab6.Api.Entities.PharmaceuticalCompany", b =>
                {
                    b.Navigation("BrandNameMedications");
                });

            modelBuilder.Entity("Lab6.Api.Entities.Prescription", b =>
                {
                    b.Navigation("ItemsOrdered");

                    b.Navigation("PrescriptionItems");
                });
#pragma warning restore 612, 618
        }
    }
}
